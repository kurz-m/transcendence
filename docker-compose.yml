services:
  authdb:
    image: postgres:12-alpine
    container_name: authdb
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    # expose:
    #   - "5432"
    ports:
      - "5654:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - authnetwork
  
  gameplaydb:
    image: postgres:12-alpine
    container_name: gameplaydb
    restart: always
    environment:
      POSTGRES_DB: ${GDB_NAME}
      POSTGRES_USER: ${GDB_USER}
      POSTGRES_PASSWORD: ${GDB_PASSWORD}
    volumes:
      - gameplay_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${GDB_USER} -d ${GDB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 5
    # expose:
    #   - "5432"
    ports:
      - "5653:5432"
    networks:
      - authnetwork
  
  twofactordb:
    image: postgres:12-alpine
    container_name: twofactordb
    restart: always
    environment:
      POSTGRES_DB: ${TDB_NAME}
      POSTGRES_USER: ${TDB_USER}
      POSTGRES_PASSWORD: ${TDB_PASSWORD}
    volumes:
      - twofactordb_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TDB_USER} -d ${TDB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 5
    # expose:
    #   - "5432"
    ports:
      - "5652:5432"
    networks:
      - authnetwork
  
  jwtdb:
    image: postgres:12-alpine
    container_name: jwtdb
    restart: always
    environment:
      POSTGRES_DB: ${JDB_NAME}
      POSTGRES_USER: ${JDB_USER}
      POSTGRES_PASSWORD: ${JDB_PASSWORD}
    volumes:
      - jwtdb_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${JDB_USER} -d ${JDB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 5
    # expose:
    #   - "5432"
    ports:
      - "5651:5432"
    networks:
      - authnetwork
  
  authservice:
    build: ./authservice/
    container_name: authservice
    restart: always
    expose:
      - "8000"
    env_file:
      - .env
    volumes:
      - static_files:${STATIC_DIRECTORY}
    depends_on:
      authdb: 
        condition: service_healthy
    networks:
      - authnetwork
  
  gameplayservice:
    build: ./gameplayservice/
    container_name: gameplayservice
    restart: always
    depends_on:
      gameplaydb: 
        condition: service_healthy
    expose:
      - "8000"
    env_file:
      - .env
    networks:
      - authnetwork

  twofactorservice:
    build: ./twofactorservice/
    container_name: twofactorservice
    restart: always
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      twofactordb: 
        condition: service_healthy
    networks:
      - authnetwork
  
  jwtservice:
    build: ./jwtservice/
    container_name: jwtservice
    restart: always
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      jwtdb: 
        condition: service_healthy
    networks:
      - authnetwork

  nginx:
    image: "nginx:1.25.5-alpine"
    container_name: nginx
    restart: always
    depends_on:
      certbot:
        condition: service_healthy
      authdb: 
        condition: service_healthy
      jwtdb: 
        condition: service_healthy
      gameplaydb: 
        condition: service_healthy
      twofactordb: 
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    networks:
      - authnetwork
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./html:/var/www/html
      - certbot_www:/var/www/certbot/:ro
      - certbot_conf:/etc/nginx/ssl/:ro
      - static_files:${STATIC_DIRECTORY}


  certbot:
    build: ./certbot/
    container_name: certbot
    restart: always
    networks:
      - authnetwork
    healthcheck:
      test: ["CMD-SHELL", "[ -f /healthy ]"]
      interval: 1s
      timeout: 5s
      retries: 10
      start_period: 30s
    volumes:
      - certbot_www:/var/www/certbot/:rw
      - certbot_conf:/etc/letsencrypt/:rw
    env_file:
      - .env

  prometheus:
    container_name: prometheus
    image: prometheus
    build: ./monitoring/prometheus/
    volumes:
      - prometheus_data:/prometheus
    networks:
      - authnetwork
    expose:
      - "9090"
    restart: always
    privileged: true
    env_file:
      - .env

  grafana:
    image: grafana/grafana:11.0.0-ubuntu
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/config/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./monitoring/grafana/config/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - 3000:3000
    env_file:
      - .env
    restart: always
    depends_on:
      - prometheus
    networks:
      - authnetwork
    privileged: true

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    platform: linux/amd64
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
    expose:
      - "8080"
    networks:
      - authnetwork
    restart: always
    privileged: true

volumes:
  postgres_data:
  gameplay_data:
  twofactordb_data:
  jwtdb_data:
  static_files:
  certbot_conf:
  certbot_www:
  prometheus_data:
  grafana_data:

networks:
  authnetwork:
    name: authnetwork
    driver: bridge
